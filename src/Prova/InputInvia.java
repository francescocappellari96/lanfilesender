/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Prova;

import java.awt.Image;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTextField;

/**
 *
 * @author PC
 */
//------------------DA INSERIRE-----------------------
//nella textArea inserire:
//1)richiesta inviata...
//2)richiesta accettata/richiesta rifiutata
//3)invio file...
//4)(...progress bar...)
//5)upload riuscito/upload non riuscito
//----------------------------------------------------
public class InputInvia extends javax.swing.JFrame {

    private InputInviaList inputInviaList = null;
    private String ip = null;
    private JFileChooser jChooser;
    private Sender sender = new Sender(this);
    private boolean variabilePapaleo = false;
    private int cont;           //for generico
    private int contTot;
    //private ArrayList<File> arrayListFiles = null;
    private ArrayList<File> filesDrop = new ArrayList<File>(); //file ottenuti dal drag and drop
    private ArrayList<File> filesChoosed = new ArrayList<File>(); //file ottenuti dal jFileChooser
    private ArrayList<File> allFilesArray = new ArrayList<File>(); //array dinamico di file ottenuto dall'unione dell'array "filesDrop" e "filesChoosed"
    private File[] allFiles = null; //array da passare al sender

    public InputInvia() {
        initComponents();
        //set immagine della finestra
        Image immagineIc = null;
        try {
            immagineIc = ImageIO.read(InputInvia.class.getClassLoader().getResourceAsStream("img/Invia1.png"));
        } catch (IOException ex) {
            Logger.getLogger(InputInvia.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setIconImage(immagineIc);
        jButton3.setEnabled(false);
        jTextArea2.setDropTarget(new DropTarget() {
            public synchronized void drop(DropTargetDropEvent evt) {
                int cont;
                try {
                    evt.acceptDrop(DnDConstants.ACTION_COPY);

                    List<File> droppedFiles = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);

                    for (File file : droppedFiles)
                    {
                        if (!filesDrop.contains(file))
                        {
                            filesDrop.add(file);
                            jLabel2.setText("File aggiunto/i");
                        }
                        else
                        {
                            jLabel2.setText("File gi√† presente/i");
                        }
                    }

                    //stampo valori su schermo
                    String output = "";
                    for (cont = 0; cont < filesDrop.size(); cont++)
                    {
                        output = output + filesDrop.get(cont).getName() + "\n";
                    }
                    jTextArea2.setText(output);
                    jTextArea2.append("File inseriti: " + filesDrop.size() + "\n");
                    variabilePapaleo = true;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lan File Sender - Invia");
        setResizable(false);

        jLabel1.setText("Indirizzo IP di destinazione:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextArea1.setFocusable(false);
        jTextArea1.setRequestFocusEnabled(false);
        jTextArea1.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Seleziona File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Invia");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Interrompi Upload");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setToolTipText("");
        jTextArea2.setAutoscrolls(false);
        jTextArea2.setBorder(javax.swing.BorderFactory.createTitledBorder("Drag & Drop"));
        jTextArea2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextArea2.setFocusable(false);
        jScrollPane2.setViewportView(jTextArea2);

        jButton4.setText("Clear Drag & Drop");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setText("Pronto a ricevere file");

        jButton5.setText("Seleziona Dest. da Lista");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Clear Choosed Files");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            ip = jTextField1.getText();

            if (!ip.equals("")) {
                jTextArea1.append("Indirizzo ip inserito: " + ip + "\n");

                
                    //somma degli array
                    //libero l'array dinamico a ogni invio per evitare di reistanziare l'oggetto
                    allFilesArray.clear();

                    //carico i file ottenuti dal jFileChooser nell'array allFilesArray
                    for (cont = 0; cont < filesChoosed.size(); cont++) {
                        allFilesArray.add(filesChoosed.get(cont));
                    }
                    //carico i file ottenuti dal Drag & Drop nell'array allFilesArray
                    for (cont = 0; cont < filesDrop.size(); cont++) {
                        allFilesArray.add(filesDrop.get(cont));
                    }

                    //conversione da arrayList di file a File[]
                    allFiles = new File[allFilesArray.size()];
                    for (cont = 0; cont < allFilesArray.size(); cont++) {
                        allFiles[cont] = allFilesArray.get(cont);
                        //System.out.println("Aggiunto file: " + allFiles[cont].getName());
                    }
                    if(allFiles.length > 0)
                    {
                        sender.setFiles(allFiles);
                        sender.connect(ip);
                    } else {
                        //custom title, error icon
                        jTextArea1.append("Nessun file selezionato o impossibile leggere\n");
                        JOptionPane.showMessageDialog(new JFrame(),
                        "Impossibile inviare senza selezionare file.\nSelezionare uno o pi√π file per l'invio",                        
                        "Nessun File Selezionato",
                        JOptionPane.ERROR_MESSAGE);
                    }
                
            } else {
                jTextArea1.append("Nessun indirizzo inserito.\n");
            }
        } catch (Exception e) {
            jTextArea1.append("Nessun indirizzo ip inserito. Inserisci un ip.\n");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        
        jChooser = new JFileChooser();
        //titolo
        jChooser.setDialogTitle("Seleziona il file da inviare");
        //aperto in modalit√† "apertura file"
        jChooser.setFileSelectionMode(JFileChooser.OPEN_DIALOG);
        //attivata la modalit√† dettagli dell'oggetto
        Action details = jChooser.getActionMap().get("viewTypeDetails");
        details.actionPerformed(null);
        //multi selezione abilitata
        jChooser.setMultiSelectionEnabled(true);
        jChooser.showOpenDialog(null);
        
        int jChooserLength;
        
        //fix di probabili eccezioni in fase di lettura della grandezza dell'array
        try
        {            
            jChooserLength = jChooser.getSelectedFiles().length;
        }
        catch(Exception npe)
        {
            jChooserLength = 0;
        }
        
        for(cont = 0;cont < jChooserLength;cont++)
        {
            //controllo file gi√† inseriti dal jfilechooser
            if(!filesChoosed.contains(jChooser.getSelectedFiles()[cont]))
            {
                filesChoosed.add(jChooser.getSelectedFiles()[cont]);
                jTextArea1.append("File selezionato:\n");
                System.out.println(filesChoosed.size());
                jTextArea1.append((contTot + cont + 1) + "):--->" + jChooser.getName(filesChoosed.get(cont + contTot)) + "\n");
            }
            else
            {
                jTextArea1.append("File gi√† selezionato.\n");
            }
        }
        contTot += cont;
        try
        {
            //sender.setFiles(allFiles);
            for(cont = 0;cont < jChooser.getSelectedFiles().length;cont++)
            {
                variabilePapaleo = true;
            }
        }
        catch (Exception e)
        {
            jTextArea1.append("Nessun file selezionato.\n");
            try
            {
                jTextArea1.append("File selezionato in precedenza:\n");
                for(cont = 0;cont < sender.getFiles().length;cont++)
                {
                    jTextArea1.append((cont + 1) + "):--->" + sender.getFiles()[cont].getName() + "\n");
                }
            }
            catch (Exception ex)
            {
                jTextArea1.append("Nessun file selezionato in precedenza. Impossibile inviare.\n");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            sender.getOUT_SOCKET().close();
            jTextArea1.append("Upload fermato.\n");
        } catch (IOException ex) {
            Logger.getLogger(InputInvia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        filesDrop.clear();
        jTextArea2.setText("Drag & Drop liberato\n");
        System.out.println(filesDrop.size());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        inputInviaList = new InputInviaList(this);
        inputInviaList.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        //libero l'array dinamico a ogni scelta per evitare di reistanziare l'oggetto
        filesChoosed.clear();
        jTextArea1.setText("");
        jTextArea1.append("Eliminati tutti i file selezionati.\n");
        contTot = 0;
    }//GEN-LAST:event_jButton6ActionPerformed

    public javax.swing.JTextArea getTextArea() {
        return this.jTextArea1;
    }

    public JProgressBar getJProgressBar1() {
        return jProgressBar1;
    }

    public JButton getjButton3() {
        return jButton3;
    }

    public JTextField getjTextField1() {
        return jTextField1;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputInvia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputInvia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputInvia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputInvia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InputInvia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
