/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Prova;

import java.awt.Image;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.imageio.ImageIO;
import javax.swing.JTable;

/**
 *
 * @author PC
 */
public class InputInviaList extends javax.swing.JFrame
{
    private InputInvia i1 = null;
    private static HostSeeker hostSeeker = null;
    
    public InputInviaList(InputInvia i1)
    {
        this.i1 = i1;
        this.setTitle("Seleziona l'host di destinazione:");
        initComponents();
        
        //set immagine della finestra
        Image immagineIc = null;
        try
        {
            immagineIc = ImageIO.read(InputInviaList.class.getClassLoader().getResourceAsStream("img/packegeTransferList.png"));
        }
        catch(IOException ex)
        {
            ex.printStackTrace();
        }
        this.setIconImage(immagineIc);
        
        //fix per avere pi√π interfacce InputInviaList aperte ed usabili. Tutte le istanze di questa classe usa sempre lo stesso datagramSocket
        if(this.hostSeeker == null)
        {
            hostSeeker = new HostSeeker();
            hostSeeker.start();
        }
        else
        {
            hostSeeker.interrupt();
            hostSeeker.socketUDP.close();
            hostSeeker = new HostSeeker();
            hostSeeker.start();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jButton1.setText("Refresh lista");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Lista di computer disponibili nella rete:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome Utente:", "Indirizzo IP:", "MAC Address:"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        hostSeeker.interrupt();
        hostSeeker.socketUDP.close();
        hostSeeker = new HostSeeker();
        hostSeeker.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        System.out.println("Inizio chiusura Classe InputInviaList");
        hostSeeker.interrupt();
        hostSeeker.socketUDP.close();
    }//GEN-LAST:event_formWindowClosed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        System.out.println("evento catturato");
        if(evt.getClickCount() == 2)
        {
            JTable target = (JTable)evt.getSource();
            int row = target.getSelectedRow();
            i1.getjTextField1().setText(hostSeeker.hostRilevati.get(row).getHostIp());
            this.dispose();
        }
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    //thread che cerca gli host connessi nella rete con FileLanSender aperto
    //porta 4443
    public class HostSeeker extends Thread
    {
        public DatagramSocket socketUDP = null;
        public ArrayList<HostInfo> hostRilevati = new ArrayList<HostInfo>();
        
        public void run()
        {
            setName("Sender - DatagramSocket");
            try
            {
                //resetto la tabaella a ogni refresh
                
                jTable1.setModel(new ModelloTabellaHostRilevati(hostRilevati));
                
                String hostName = null;
                String hostIp = null;
                String hostMACAddress = null;
                StringTokenizer packetData = null;
                String passKey = "Wrachuz=bac?2-ePufrESpabeyA2ad";
                //String passKey = "sattoh";
                byte[] buffer = new byte[1024];
                //inseriti dai caratteri separatori aggiuntivi per delimitare correttamente la chiave nella conversione non del tutto corretta (es: "StringaInviata" con numeri spazi concatenati dietro)
                byte[] byteInformation = ("@" + passKey + "@").getBytes();
                DatagramPacket packetSend = new DatagramPacket(byteInformation,byteInformation.length,InetAddress.getByName("255.255.255.255"),4444);
                DatagramPacket packetReceived = new DatagramPacket(buffer,buffer.length);                
                socketUDP = new DatagramSocket(4443);
                socketUDP.send(packetSend);
                
                System.out.println("Pacchetto broadCast mandato");
                
                while(true)
                {
                    System.out.println("In Attesa risposte...");
                    socketUDP.receive(packetReceived);
                    
                    System.out.println("Dati: " + new String(packetReceived.getData()));
                    
                    packetData = new StringTokenizer(new String(packetReceived.getData()),"@");
                    
                    if(passKey.equals(packetData.nextToken()))
                    {
                        System.out.println("Ricevuto risposta da: " + packetReceived.getAddress());
                        //nome - ip - mac address
                        hostRilevati.add(new HostInfo(packetData.nextToken(),packetReceived.getAddress().getHostAddress(),packetData.nextToken()));
                        //applico un refresh della tabella ad ogni aggiunta
                        jTable1.setModel(new ModelloTabellaHostRilevati(hostRilevati));
                    }
                }
            }
            catch(Exception e)
            {
                System.out.println("Sender: DatagramSocket Chiuso.");
            }
        }
    }
}
